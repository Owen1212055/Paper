# Here lie dragons!
#
# This action either builds the server or
# builds a paperclip jar to be updated in the body
# of the PR relating to this action.

name: Build Paper
on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled

jobs:
  build:
    # The goal of the build workflow is split into multiple requirements.
    # 1. Run on pushes to same repo.
    # 2. Run on PR open/reopen/syncs from repos that are not the same (PRs from the same repo are covered by 1)
    # 3. Run on labeled PRs that have the publish-pr flag.
    if: >
      (
        (github.event_name == 'push')
        || (github.event_name == 'pull_request' && github.repository != github.event.pull_request.head.repo.full_name && contains(fromJSON('["opened", "reopened", "synchronize"]'), github.event.action))
        || (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'publish-pr')
      )

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          # todo remove me again after the update
          ref: ${{ github.ref_name }}
          fetch-depth: 0
      - if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Configure Build
        uses: actions/github-script@v7
        id: determine
        env:
          REF_NAME: "${{ github.ref_name }}"
          REF_TYPE: "${{ github.ref_type }}"
          EVENT: "${{ toJSON(github.event) }}"
          EVENT_TYPE: "${{ github.event_name }}"
        with:
          result-encoding: string
          script: |
            const {owner, repo} = context.repo;
            const event_name = `${process.env.EVENT_TYPE}`;
            const event = JSON.parse(`${process.env.EVENT}`);
            const ref_type = `${process.env.REF_TYPE}`;
            const ref_name = `${process.env.REF_NAME}`;
            const result = {
              paperclip: false,
              diffpublish: false
            };
            
            async function processLabels(pr, pr_num) {
              const names = pr.labels.map(l => l.name);
              if (names.includes("publish-pr"))   result.paperclip    = true;
              if (names.includes("publish-diff")) result.diffgenerator = true;
              result["pr"] = pr_num;
            }
            
            const marker_labels = ["publish-pr", "publish-diff"];

            if (event_name === "push" && ref_type === "branch") {
              const {data: pulls} = await github.rest.pulls.list({ owner, repo, head: `${owner}:${ref_name}`, state: "open" });
              const pull = pulls.find(pr => !!pr.labels.some(l => marker_labels.includes(l.name)));
              if (pull) {
                processLabels(pull, pull.number);
                core.notice(`This is a push action but to a branch with an open PR with a build marker label (${JSON.stringify(result)})`);
                return result;
              }
            } else if (event_name === "pull_request" && event.pull_request.labels.some(l => marker_labels.includes(l.name))) {
              processLabels(event.pull_request, event.pull_request.number);
              core.notice(`This is a pull request action with a build marker label (${JSON.stringify(result)})`);
              return result;
            }
            core.notice("This has no marker labels, so modifications to build will occur.");
            return result;

      - name: Apply Patches
        run: |
          git config --global user.email "no-reply@github.com"
          git config --global user.name "GitHub Actions"
          ./gradlew applyPatches --stacktrace

      - name: Build
        run: ./gradlew build --stacktrace

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: |
            **/build/test-results/test/TEST-*.xml
      - name: Trigger Diff-Publish Workflow
        if: steps.determine.outputs.diffpublish == 'true'
        uses: ./.github/workflows/diff_publish.yml
      - name: Create Paperclip Jar
        if: steps.determine.outputs.paperclip == 'true'
        run: ./gradlew createMojmapPaperclipJar --stacktrace

      - name: Upload Paperclip Jar
        if: steps.determine.outputs.paperclip == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: steps.determine.outputs.paperclip == 'true'
          path: paper-server/build/libs/paper-paperclip-*-mojmap.jar

      - name: Publish Artifacts
        if: steps.determine.outputs.paperclip == 'true'
        uses: PaperMC/action-pr-publishing/upload@paper
        with:
          # TODO fallback for failing javadoc
          publishing-task: ":paper-api:publishAllPublicationsTo_githubPackages_PRsRepository publishDevBundlePublicationTo_githubPackages_PRsRepository -PpublishDevBundle"
  event_file:
    name: "Event File"
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Event File
          path: ${{ github.event_path }}
