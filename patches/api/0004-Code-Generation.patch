From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Fri, 26 May 2023 18:14:44 -0700
Subject: [PATCH] Code Generation

Currently includes generated key holder classes for types
used in the Registry Modification API

diff --git a/build.gradle.kts b/build.gradle.kts
index 97ba0ab8e268ba2f937143aaa5b68ea6f6cbfb88..f4dc99545a9e6b758a826b32ce6cd4a1b879caec 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,6 +1,7 @@
 plugins {
     `java-library`
     `maven-publish`
+    idea // Paper
 }
 
 java {
@@ -43,6 +44,22 @@ dependencies {
     testImplementation("org.ow2.asm:asm-tree:9.4")
 }
 
+// Paper start
+val generatedApiPath: java.nio.file.Path = project(":paper-api-generator").projectDir.toPath().resolve("generated-api")
+idea {
+    module {
+        generatedSourceDirs.add(generatedApiPath.toFile())
+    }
+}
+sourceSets {
+    main {
+        java {
+            srcDir(generatedApiPath)
+        }
+    }
+}
+// Paper end
+
 configure<PublishingExtension> {
     publications.create<MavenPublication>("maven") {
         from(components["java"])
@@ -105,3 +122,15 @@ tasks.check {
     dependsOn(scanJar)
 }
 // Paper end
+// Paper start
+// TODO uncomment once paperweight is updated to include this task type
+// val scanJarForOldGeneratedCode = tasks.register("scanJarForOldGeneratedCode", io.papermc.paperweight.tasks.ScanJarForOldGeneratedCode::class) {
+//     mcVersion.set(providers.gradleProperty("mcVersion"))
+//     annotation.set("Lio/papermc/paper/generated/GeneratedFrom;")
+//     jarToScan.set(tasks.jar.flatMap { it.archiveFile })
+//     classpath.from(configurations.compileClasspath)
+// }
+// tasks.check {
+//     dependsOn(scanJarForOldGeneratedCode)
+// }
+// Paper end
diff --git a/src/main/java/io/papermc/paper/generated/GeneratedFrom.java b/src/main/java/io/papermc/paper/generated/GeneratedFrom.java
new file mode 100644
index 0000000000000000000000000000000000000000..87325f75e258717fef01ff5fee4dde7ae6fd8cd2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/generated/GeneratedFrom.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.generated;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * Used to mark classes which are generated from
+ * a specific version of minecraft.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@interface GeneratedFrom {
+
+    String value();
+}
diff --git a/src/main/java/io/papermc/paper/registry/TypedKey.java b/src/main/java/io/papermc/paper/registry/TypedKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..ceaf8ebbbfaa44cea7dbafd514e1edf2e38b4d07
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/TypedKey.java
@@ -0,0 +1,44 @@
+package io.papermc.paper.registry;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents a key for a value in a specific registry.
+ *
+ * @param <T> the value type for the registry
+ */
+@ApiStatus.Experimental
+public sealed interface TypedKey<T extends Keyed> extends Keyed permits TypedKeyImpl {
+
+    /**
+     * Gets the key for the value in the registry.
+     *
+     * @return the value's key
+     */
+    @Override
+    @NotNull Key key();
+
+    /**
+     * Gets the registry key for the value this key
+     * represents.
+     *
+     * @return the registry key
+     */
+    @NotNull Void registryKey();
+
+    /**
+     * Create a typed key from a key and a registry key.
+     *
+     * @param key the key for the value in the registry
+     * @param registryKey the registry this key is for
+     * @return a new key for the value key and registry key
+     * @param <T> value type
+     */
+    @ApiStatus.Experimental
+    static <T extends Keyed> @NotNull TypedKey<T> create(@NotNull Key key, @NotNull Void registryKey) {
+        return new TypedKeyImpl<>(key, registryKey);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/TypedKeyImpl.java b/src/main/java/io/papermc/paper/registry/TypedKeyImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f62fd37d015322afc31537cec7c8e745faafd6d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/TypedKeyImpl.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.registry;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.NotNull;
+
+record TypedKeyImpl<T extends Keyed>(@NotNull Key key, @NotNull Void registryKey) implements TypedKey<T> {
+}
diff --git a/src/main/java/org/bukkit/MinecraftExperimental.java b/src/main/java/org/bukkit/MinecraftExperimental.java
index 4e7e69219876eb6162f6e2cdf2ac3d242f7d75f6..b325b96711dd69e8fa21f6abf307994d9e72caa3 100644
--- a/src/main/java/org/bukkit/MinecraftExperimental.java
+++ b/src/main/java/org/bukkit/MinecraftExperimental.java
@@ -24,4 +24,5 @@ import org.jetbrains.annotations.ApiStatus;
 })
 @ApiStatus.Internal
 public @interface MinecraftExperimental {
+    String value() default ""; // Paper
 }
